#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
// A C program to demonstrate linked list based implementation of queue
 
// A linked list (LL) node to store a queue entry
int count=0;
struct node
{
    int info;
    struct node *ptr;
}*top,*top1,*temp;

 void create()
{
    top = NULL;
}
 
 

void push(int data)
{
    if (top == NULL)
    {
        top =(struct node *)malloc(1*sizeof(struct node));
        top->ptr = NULL;
        top->info = data;
    }
    else
    {
        temp =(struct node *)malloc(1*sizeof(struct node));
        temp->ptr = top;
        temp->info = data;
        top = temp;
    }
    count++;
}


/* Pop Operation on stack */
void pop()
{
    top1 = top;
 
    if (top1 == NULL)
    {
        printf("\n Error : Trying to pop from empty stack");
        return;
    }
    else
        top1 = top1->ptr;
   // printf("\n Popped value : %d", top->info);
    free(top);
    top = top1;
    count--;
}
 
/* Return top element */
int topelement()
{
    return(top->info);
}
 
/* Check if stack is empty or not */
bool empty()
{
    if (top == NULL)
        return true;
    else
      return false;
}

struct QNode
{
    int key;
    struct QNode *next;
};
 
// The queue, front stores the front node of LL and rear stores ths
// last node of LL
struct Queue
{
    struct QNode *front, *rear;
};
 
// A utility function to create a new linked list node.
struct QNode* newNode(int k)
{
    struct QNode *temp = (struct QNode*)malloc(sizeof(struct QNode));
    temp->key = k;
    temp->next = NULL;
    return temp; 
}
 
// A utility function to create an empty queue
struct Queue *createQueue()
{
    struct Queue *q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = q->rear = NULL;
    return q;
}
 
// The function to add a key k to q
void enQueue(struct Queue *q, int k)
{
    // Create a new LL node
    struct QNode *temp = newNode(k);
 
    // If queue is empty, then new node is front and rear both
    if (q->rear == NULL)
    {
       q->front = q->rear = temp;
       return;
    }
 
    // Add the new node at the end of queue and change rear
    q->rear->next = temp;
    q->rear = temp;
}
 
// Function to remove a key from given queue q
struct QNode *deQueue(struct Queue *q)
{
    // If queue is empty, return NULL.
    if (q->front == NULL)
       return NULL;
 
    // Store previous front and move front one node ahead
    struct QNode *temp = q->front;
    q->front = q->front->next;
 
    // If front becomes NULL, then change rear also as NULL
    if (q->front == NULL)
       q->rear = NULL;
    return temp;
}
 
// A structure to represent an adjacency list node
struct AdjListNode
{
    int dest;
    struct AdjListNode* next;
};
 
// A structure to represent an adjacency list
struct AdjList
{
    struct AdjListNode *head;  // pointer to head node of list
};
 
// A structure to represent a graph. A graph is an array of adjacency lists.
// Size of array will be V (number of vertices in graph)
struct Graph
{
    int V;
    struct AdjList* array;
};
 
// A utility function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest)
{
    struct AdjListNode* newNode =
            (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}
 
// A utility function that creates a graph of V vertices
struct Graph* createGraph(int V)
{
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->V = V;
 
    // Create an array of adjacency lists.  Size of array will be V
    graph->array = (struct AdjList*) malloc(V * sizeof(struct AdjList));
 
     // Initialize each adjacency list as empty by making head as NULL
    int i;
    for (i = 0; i < V; ++i)
        graph->array[i].head = NULL;
 
    return graph;
}
 
// Adds an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest)
{
    // Add an edge from src to dest.  A new node is added to the adjacency
    // list of src.  The node is added at the begining
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;
 
    // Since graph is undirected, add an edge from dest to src also
   /* newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;*/
}
struct Graph* transpose(struct Graph* graph)
{
 struct AdjListNode* pCrawl;
 for (int v = 0; v < graph->V; v++){
for(pCrawl = graph->array[v].head;pCrawl!=NULL;pCrawl = pCrawl->next)
{
//printf("%d->%d ",pCrawl->dest,v);
 struct AdjListNode* newNode = newAdjListNode(pCrawl->dest);
    newNode->next = graph->array[v].head;
    graph->array[v].head = newNode;

}
printf("\n");
}
return graph;
}
void  DFSUtil(struct Graph* graph,int u,bool visited[])
        {
          struct AdjListNode* pCrawl;
       
          visited[u]=true;
         // printf("%d",u);
         // time =time+1;
           // initial[u]=time;
            
           
		for(pCrawl = graph->array[u].head;pCrawl!=NULL;pCrawl = pCrawl->next){
          
            if(!visited[(pCrawl->dest)])  {                      
                //parent[pCrawl->dest]=u;
         DFSUtil(graph,pCrawl->dest,visited);
            
         }
        }
            //time=time+1;

          //final[u]=time;
        
      } 
 

  
void fillOrder(struct Graph* graph,int v, bool visited[])
{
    // Mark the current node as visited and print it
    visited[v] = true;
 struct AdjListNode* pCrawl;
    // Recur for all the vertices adjacent to this vertex
  
  for(pCrawl = graph->array[v].head;pCrawl!=NULL;pCrawl = pCrawl->next)
        if(!visited[(pCrawl->dest)]) 
            fillOrder(graph,pCrawl->dest, visited);
 
    // All vertices reachable from v are processed by now, push v 
    push(v);
 
}   

void printSCCs(struct Graph* graph)
{
    // Mark all the vertices as not visited (For first DFS)
    bool visited[graph->V];
     for(int i=0;i<graph->V;i++)
         visited[i]=false;
     
 
    // Fill vertices in stack according to their finishing times
    for(int i = 0; i < graph->V; i++)
        if(visited[i] == false)
            fillOrder(graph,i, visited);
 
    // Create a reversed graph
   struct Graph* graphh = transpose(graph);
 
    // Mark all the vertices as not visited (For second DFS)
    for(int i = 0; i < graphh->V; i++)
        visited[i] = false;
 
    // Now process all vertices in order defined by Stack
    while (empty() == false)
    {
        // Pop a vertex from stack
        int v = topelement();
        pop();

        // Print Strongly connected component of the popped vertex
        if (visited[v] == false)
        {
           
            DFSUtil(graphh,v, visited);
 
            printf("\n");
        }
    }
}


int main()
{int V=8;
     struct Graph* graph = createGraph(V);
  
  addEdge(graph,0, 1);  
 addEdge(graph,0, 4);
addEdge(graph,1, 2);
 addEdge(graph,1, 5); 
addEdge(graph,2, 3); 
 addEdge(graph,3, 7);
 addEdge(graph,4, 5);
addEdge(graph,4, 6);
  addEdge(graph,5, 2); 
 addEdge(graph,5, 6);
addEdge(graph,5, 7);
addEdge(graph,7, 2); 
    //printf("Following is Breadth First Traversal (starting from vertex 0) \n");
  printSCCs(graph);
 
 
    return 0;
}
